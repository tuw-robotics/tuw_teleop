#!/usr/bin/env python3

"""
The code in this file is based on the following source, thanks to the author.
Source: https://gist.github.com/peci1/912549b79fd6e8801023
"""

import types
from typing import List
from typing import TypedDict
from typing import Union


class EnumItem(TypedDict):
    name: str
    value: Union[bool, int, float, str]
    description: str


class ConfigModifier:
    @staticmethod
    def change_enum_items(config_type: types.ModuleType,
                          parameter_name: str,
                          new_enum_items: List[EnumItem],
                          default=None) -> None:
        """
        Change the content of a dynamic reconfigure enum field.
        In order to add the new values properly the dynamic reconfigure server has to be created after the enum has been
        updated.
        :param config_type: autogenerated config (package.cfg.*Config)
        :param parameter_name: parameter to change (has to have enum as edit method)
        :param new_enum_items: the new items that will replace the original enum
            :type new_enum_items: list of dicts with structure {"name": ..., "value": ..., "description": ...}
        :param default: this will be the default if provided, otherwise the first element will be the default
        :raises RuntimeError: if there is no valid enum parameter with the given name in the given config_type
        """

        if not hasattr(config_type, "config_description") or not hasattr(config_type, "defaults"):
            raise RuntimeError("dynamic reconfigure {} "
                               "is not a valid dynamic reconfigure type".format(str(config_type)))

        for parameter_description in config_type.config_description["parameters"]:
            if parameter_description["name"] == parameter_name:
                if parameter_description["edit_method"] == "":
                    raise RuntimeError("dynamic reconfigure {} "
                                       "has other edit method than enum".format(str(config_type)))

                edit_method = eval(parameter_description["edit_method"])
                enum = edit_method["enum"]

                if len(enum) == 0:
                    raise RuntimeError("dynamic reconfigure {} "
                                       "has too few elements to be a proper enum".format(str(config_type)))

                sample_enum_item = enum[0]

                new_enum = []
                for item in new_enum_items:
                    new_enum_item = sample_enum_item.copy()
                    new_enum_item["name"] = item["name"]
                    new_enum_item["value"] = item["value"]
                    new_enum_item["description"] = item["description"]
                    new_enum.append(new_enum_item)

                edit_method["enum"] = new_enum
                parameter_description["edit_method"] = repr(edit_method)

                parameter_description["default"] = default if default is not None else new_enum[0]["value"]
                config_type.defaults[parameter_description["name"]] = default

                return

        raise RuntimeError("dynamic reconfigure {} has no parameter {}".format(str(config_type), parameter_name))
